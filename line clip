#include <iostream>
#include <graphics.h>
#include <math.h>
using namespace std;

// Function to draw the clipping window
void Window()
{
    line(200, 200, 350, 200); // Top
    line(350, 200, 350, 350); // Right
    line(200, 350, 350, 350); // Bottom
    line(200, 200, 200, 350); // Left
}

// Function to compute the region code
void Code(char c[4], float x, float y)
{
    c[0] = (x < 200) ? '1' : '0'; // Left
    c[1] = (x > 350) ? '1' : '0'; // Right
    c[2] = (y < 200) ? '1' : '0'; // Bottom
    c[3] = (y > 350) ? '1' : '0'; // Top
}

// Function to perform line clipping
void Clipping(char c[], char d[], float &x, float &y, float m)
{
    int flag = 1;
    for (int i = 0; i < 4; i++)
    {
        if (c[i] != '0' && d[i] != '0')
        {
            flag = 0; // Line is outside
            break;
        }
    }

    if (flag)
    {
        if (c[0] != '0') // Left
        {
            y = m * (200 - x) + y;
            x = 200;
        }
        else if (c[1] != '0') // Right
        {
            y = m * (350 - x) + y;
            x = 350;
        }
        else if (c[2] != '0') // Bottom
        {
            x = ((200 - y) / m) + x;
            y = 200;
        }
        else if (c[3] != '0') // Top
        {
            x = ((350 - y) / m) + x;
            y = 350;
        }
    }

    if (!flag)
    {
        cout << "Line is outside the window and cannot be clipped.\n";
    }
}

int main()
{
    int gdriver = DETECT, gmode;
    float x1, y1, x2, y2;
    float m;
    char c[4], d[4];

    initgraph(&gdriver, &gmode, "//Turboc3//bgi");

    // Input coordinates of the line
    cout << "Enter the coordinates of the line (x1, y1, x2, y2): ";
    cin >> x1 >> y1 >> x2 >> y2;

    cout << "Before Clipping" << endl;
    Window();
    line(x1, y1, x2, y2); // Draw the original line
    getch();

    cleardevice();

    m = float((y2 - y1) / (x2 - x1)); // Slope of the line

    // Compute region codes
    Code(c, x1, y1);
    Code(d, x2, y2);

    // Perform line clipping
    Clipping(c, d, x1, y1, m);
    Clipping(d, c, x2, y2, m);

    cout << "After Clipping" << endl;
    Window();
    line(x1, y1, x2, y2); // Draw the clipped line
    getch();

    closegraph();
    return 0;
}
